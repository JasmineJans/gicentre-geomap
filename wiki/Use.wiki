=Use=

==!GeoMap==

===Constructor methods===

Each {{{GeoMap}}} has two constructor methods.

<a name="constructor_bounds_parent">
<code language="processing">GeoMap(xOrigin, yOrigin, mapWidth, mapHeight, parent)</code>

The first constructor method creates a map with the given bounds. It has five parameters:

 # {{{xOrigin}}} is the position of the map from the left of the sketch. It should be a {{{float}}} or an {{{int}}}.
 # {{{yOrigin}}} is the position of the map from the top of the sketch. It should be a {{{float}}} or an {{{int}}}.
 # {{{mapWidth}}} is the width of the map. It should be a {{{float}}} or an {{{int}}}.
 # {{{mapHeight}}} is the height of the map. It should be a {{{float}}} or an {{{int}}}.
 # {{{parent}}} is the parent sketch. It should be a {{{PApplet}}}. In most cases, simply use {{{this}}} to refer to the current Processing sketch.

----
<a name="constructor_parent">
<code language="processing">GeoMap(PApplet parent)</code>

The second constructor method creates a map with the default bounds. It has one parameter:

 # {{{parent}}} is the parent sketch. It should be a {{{PApplet}}}. In most cases, simply use {{{this}}} to refer to the current Processing sketch.

===Read methods===

Each {{{GeoMap}}} has one method to read data from an [http://en.wikipedia.org/wiki/Shapefile ESRI shapefile]. Note that a shapefile consists of three files:

 * _fileName.shp_ contains the geometry.
 * _fileName.dbf_ contains the attributes.
 * _fileName.dbx_ contains the index.

Each file should be placed in the data directory of the current Processing sketch. The easiest way to do this is to drag and drop each file into the Processing development environment.

<code language="processing">geoMap.readFile(fileName)</code>

Reads data from an [http://en.wikipedia.org/wiki/Shapefile ESRI shapefile]. It has one parameter:

 # {{{fileName}}} is the name of the file without the extension. It should be a {{{String}}}.

===Draw methods===

Each {{{GeoMap}}} has three draw methods.

<code language="processing">geoMap.draw()</code>

The first draw method draws the map in the parent sketch.

----
<code language="processing">geoMap.draw(id)</code>

The second draw method draws the feature that matches the given id in the map's attribute table. It has one parameter:

 # {{{id}}} is the id that matches the feature to draw. It should be an {{{int}}}.

----
<code language="processing">geoMap.draw(value, column)</code>

The third draw method draws the features that match the given value in the given column in the map's attribute table. It has two parameters:

 # {{{value}}} is the value that matches the features to draw. It should be a {{{String}}}.
 # {{{column}}} is the column in the map's attribute table. It should be an {{{int}}}. Note that the first column in the map's attribute table is {{{0}}}, the second is {{{1}}}, the third is {{{2}}} and so on.

===Attribute table methods===

Each {{{GeoMap}}} has an attribute table. By default, this stores the attributes read from an [http://en.wikipedia.org/wiki/Shapefile ESRI shapefile] by the {{{geoMap.readFile()}}} method. In an attribute table, rows are features and columns are attributes. Each {{{GeoMap}}} has one attribute table method.

<code language="processing">geoMap.getAttributes()</code>

Gets the map's attribute table. It will be a {{{Table}}}.

==Table==

Each {{{GeoMap}}} has an attribute table. By default, this stores the attributes read from an [http://en.wikipedia.org/wiki/Shapefile ESRI shapefile] by the {{{geoMap.readFile()}}} method. In an attribute table, rows are features and columns are attributes.

===Write methods===

Each {{{Table}}} has one write method.

<code language="processing">table.writeAsTable(maxNumRows)</code>

Writes the map's attribute table to the console in the Processing development environment. It has one parameter:

 # {{{maxNumRows}}} is the maximum number of rows to write to the console in the Processing development environment. It should be an {{{int}}}.